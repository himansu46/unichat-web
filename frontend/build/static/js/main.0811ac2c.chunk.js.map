{"version":3,"sources":["components/SingleChat.js","Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["socket","selectedChatCompare","ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","placeholder","onChange","e","target","type","width","colorScheme","h","size","onClick","style","marginTop","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","isLoading","Homepage","minW","d","textAlign","fontWeight","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","display","base","icon","View","isCentered","justifyContent","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","marginRight","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0811ac2c.chunk.js","sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"https://mern-unichat.herokuapp.com/\"; // \"https://mern-unichat.herokuapp.com/ \"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n            bg={\"lightgray\"}\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={2}\n            bg={\"lightgray\"}\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg={\"gray\"}\n                placeholder =\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [, setLoading] = useState(false);\n  const { setUser } = ChatState();\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email</FormLabel>\n        <Input\n          placeholder=\"Enter your Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup>\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button\n              colorScheme=\"blackAlpha\"\n              h=\"1.75rem\"\n              size=\"sm\"\n              onClick={handleClick}\n            >\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"green\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n      >\n        Log In\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button, FormControl, FormLabel, Input, InputGroup, InputRightElement, VStack } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport { useHistory } from \"react-router\";\nconst Signup = () => {\n    const [show, setShow] = useState(false);\n\n    const [name, setName] = useState();\n    const [email, setEmail] = useState();\n    const [confirmpassword, setConfirmpassword] = useState();\n    const [password, setPassword] = useState();\n    const [pic, setPic] = useState();\n    const [picLoading, setPicLoading] = useState(false);\n\n    const handleClick = () => setShow(!show);\n    const toast = useToast();\n    const history = useHistory();\n const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n\n\n\n     const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"himansu\");\n      fetch(\"https://api.cloudinary.com/v1_1/himansu/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n\n    return (\n    <VStack spacing ='5px'>\n        <FormControl id='first-name' isRequired>\n            <FormLabel>Name</FormLabel>\n            <Input \n            placeholder='Enter your Name'\n            onChange={(e)=>setName(e.target.value)}/>\n        </FormControl>\n        <FormControl id='email' isRequired>\n            <FormLabel>Email</FormLabel>\n            <Input \n            placeholder='Enter your Email'\n            onChange={(e)=>setEmail(e.target.value)}/>\n        </FormControl>\n        <FormControl id='password' isRequired>\n            <FormLabel> Password</FormLabel>\n            <InputGroup><Input \n            type={show? 'text':'password'}\n            placeholder='Password'\n            onChange={(e)=>setPassword(e.target.value)}/>\n            <InputRightElement width=\"4.5rem\">\n            <Button colorScheme='blackAlpha' h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n            </InputGroup>    \n        </FormControl>\n        <FormControl id='password' isRequired>\n            <FormLabel>Confirm Password</FormLabel>\n            <Input \n            type={'password'}\n            placeholder='Confirm Password'\n            onChange={(e)=>setConfirmpassword(e.target.value)}/>\n        </FormControl>\n        <FormControl id='pic'>\n            <FormLabel>Upload your Picture</FormLabel>\n            <Input \n            type='file'\n            p={1.5}\n            accept=\"image/*\"\n            placeholder='Enter Your Email'\n            onChange={(e)=>postDetails(e.target.files[0])}/>\n        </FormControl>\n         <Button\n        colorScheme=\"green\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  )\n}\n\nexport default Signup\n","import React, { useEffect } from 'react';\nimport { Box, Container, Tab, TabList, TabPanel, TabPanels, Tabs, Text } from \"@chakra-ui/react\";\nimport Login from '../components/Authentication/Login';\nimport Signup from '../components/Authentication/Signup';\nimport { useHistory } from 'react-router-dom';\nconst Homepage = () => {\n   const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n  return (\n  <Container minW='X5'>\n    <Box\n    d=\"flex\"\n    textAlign=\"center\"\n    fontWeight='bold'\n    bg={\"lightgray\"}\n    w=\"100%\"\n    position= \"relative\"\n    m=\"40px 0 15px 0\"\n    borderRadius=\"lg\"\n    borderWidth=\"2px\"\n    >\n    <Text fontSize='3xl' fontFamily=\"Work Sans\">UniChat</Text>\n    </Box>\n     <Box bg=\"lightgray\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\" colorScheme='blackAlpha'>\n          <TabList mb=\"1em\">\n            <Tab width=\"50%\">Log In</Tab>\n            <Tab width=\"50%\">Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />  \n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Homepage\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal  size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n            bg=\"lightgray\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n          bg=\"lightgray\"\n            display=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter bg=\"lightgray\">\n            <Button colorScheme=\"red\" onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({user, handleFunction }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n          bg={\"gray\"}\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody bg={\"lightgray\"} display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl display=\"flex\">\n              <Input \n               bg={\"lightgray\"}\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"green\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input  bg={\"lightgray\"}\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter bg={\"lightgray\"}>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"gray\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n           \n          bg=\"gray\"\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody  bg=\"gray\" display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n              bg={\"lightgray\"}\n              \n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n            \n              bg={\"lightgray\"}\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter bg=\"gray\">\n            <Button onClick={handleSubmit} colorScheme=\"green\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"gray\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"25px\", md: \"20px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontWeight={\"semibold\"}\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n          p={\"2\"}\n            display=\"flex\"\n            fontSize={{ base: \"11px\", md: \"10px\", lg: \"15px\" }}\n            rightIcon={<AddIcon />}\n            bg=\"lightgray\"\n            color=\"black\"\n          >\n           Create Group\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"lightgray\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={2}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text   fontWeight={\"semibold\"}>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text\n                \n                  fontSize=\"sm\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import React from 'react'\n\n\nimport { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\n\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserListItem from '../userAvatar/UserListItem';\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n   const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"Gray\"\n        w={{ base: \"94%\", md: \"98%\" ,lg:\"98.5%\" }}\n\n     marginLeft= \"auto\"\n      marginRight={\"auto\"}\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"1px\"\n        borderRadius={\"lg\"}\n\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text display={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontWeight={\"Bold\"} fontSize=\"2xl\" fontFamily=\"Work sans\">\n          UniChat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton m=\"0\"p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList   bg={\"lightgray\"}  pl={1}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton p={\"5px\"} as={Button} bg=\"lightgray\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n              p={\"1px\"}\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList bg=\"lightgray\">\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer  placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent bg=\"lightgray\">\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box display=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) =>    handleSearch(e.target.value)}\n              />\n           \n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div  style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box display=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}